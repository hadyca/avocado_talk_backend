datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              Int      @id @default(autoincrement())
  username        String   @unique
  email           String   @unique
  avatar          String?
  bio             String?
  password        String
  authCode        Int
  loginSecret     String?
  followings      Company[]    @relation("FollowRelation", references: [id]) //회사 팔로잉 (팔로잉 하는 회사가 올리는 채용 글 읽기)
  favoritePosts   CompanyPost[] @relation("FavoriteRelation", references: [id])
  companyPostLikes    CompanyPostLike[]
  userPostLikes       UserPostLike[]
  companyOwner    Company?
  companyPostComments        CompanyPostComment[]
  companyPostReComments CompanyPostReComment[]
  userPostComments                UserPostComment[]
  userPostReComments  UserPostReComment[]
  userPosts       UserPost[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model UserPost {
  id              Int       @id @default(autoincrement())
  user            User      @relation(fields: [userId], references: [id])
  userId          Int
  file            File[]
  title           String
  content         String
  category        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userLikes       UserPostLike[]
  userPostComments        UserPostComment[]
  deleted         Boolean @default(false)
}

model UserPostLike {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          Int      
  userPost        UserPost    @relation(fields: [userPostId], references: [id]) 
  userPostId      Int      
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  @@unique([userId, userPostId])
}

model UserPostComment {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  userPost        UserPost    @relation(fields: [userPostId], references: [id]) 
  userPostId      Int 
  payload         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deleted         Boolean @default(false)
  userPostReComments UserPostReComment[]
}

model UserPostReComment {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  userPostComment        UserPostComment    @relation(fields: [userPostCommentId], references: [id]) 
  userPostCommentId      Int 
  payload         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deleted         Boolean @default(false)
}

//User와 1:1관계 (회사 오너만 / 운영자 승인 후 연결)
model Company {
    id            Int      @id @default(autoincrement())
    user          User     @relation(fields: [userId], references: [id])
    userId        Int      @unique
    followers     User[]    @relation("FollowRelation", references: [id])
    companyName   String
    addressStep1  String    //가장 큰 행정 구역 (시스템 제공)
    addressStep2  String    //두번 째로 큰 행정 구역 (시스템 제공)
    addressStep3  String    //나머지 주소 (사용자가 직접 타이핑)
    sector        String
    email         String   @unique
    aboutUs       String   // 회사 소개
    contactNumber String
    totalEmployees  Int?
    companyPosts  CompanyPost[]
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    }

model CompanyPost {
  id              Int       @id @default(autoincrement())
  favoritedUser   User[]      @relation("FavoriteRelation", references: [id])
  company         Company      @relation(fields: [companyId], references: [id])
  companyId       Int    
  file            File[]
  postSector      String
  title           String
  content         String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  companyLikes    CompanyPostLike[]
  companyPostComments        CompanyPostComment[]
  deleted         Boolean @default(false)

}

model CompanyPostLike {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          Int   
  companyPost     CompanyPost    @relation(fields: [companyPostId], references: [id]) 
  companyPostId   Int      
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  @@unique([userId, companyPostId])
}

model CompanyPostComment {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  companyPost     CompanyPost    @relation(fields: [companyPostId], references: [id]) 
  companyPostId   Int 
  payload         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deleted         Boolean @default(false)
  companyPostReComments CompanyPostReComment[]
}

model CompanyPostReComment {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  companyPostComment     CompanyPostComment    @relation(fields: [companyPostCommentId], references: [id]) 
  companyPostCommentId   Int 
  payload         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deleted         Boolean @default(false)
}

model File {
  id              Int      @id @default(autoincrement())
  fileUrl         String
  fileKey         String
  userPost        UserPost?    @relation(fields: [userPostId], references: [id]) 
  userPostId      Int?
  companyPost     CompanyPost?    @relation(fields: [companyPostId], references: [id])
  companyPostId   Int?
}